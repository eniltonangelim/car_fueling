// Mocks generated by Mockito 5.4.2 from annotations
// in car_fueling/test/gamer/domain/usecases/get_artboard_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:car_fueling/core/core.dart' as _i6;
import 'package:car_fueling/gamer/domain/usecases/get_artboard_usecase.dart'
    as _i4;
import 'package:car_fueling/gamer/gamer.dart' as _i7;
import 'package:dartz/dartz.dart' as _i2;
import 'package:flutter/material.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWidget_1 extends _i1.SmartFake implements _i3.Widget {
  _FakeWidget_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.info}) =>
      super.toString();
}

/// A class which mocks [GetArtBoardUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetArtBoardUseCase extends _i1.Mock
    implements _i4.GetArtBoardUseCase {
  MockGetArtBoardUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Either<_i6.Failure, _i7.Board>> call(_i6.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i2.Either<_i6.Failure, _i7.Board>>.value(
            _FakeEither_0<_i6.Failure, _i7.Board>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, _i7.Board>>);
}

/// A class which mocks [Board].
///
/// See the documentation for Mockito's code generation for more information.
class MockBoard extends _i1.Mock implements _i7.Board {
  MockBoard() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Widget get art => (super.noSuchMethod(
        Invocation.getter(#art),
        returnValue: _FakeWidget_1(
          this,
          Invocation.getter(#art),
        ),
      ) as _i3.Widget);
  @override
  List<Object> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object>[],
      ) as List<Object>);
}
