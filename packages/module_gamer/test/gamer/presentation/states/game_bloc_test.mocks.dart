// Mocks generated by Mockito 5.4.2 from annotations
// in module_gamer/test/gamer/presentation/states/game_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:module_gamer/module_gamer.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [BoardRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockBoardRepository extends _i1.Mock implements _i3.BoardRepository {
  MockBoardRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i3.Failure, _i3.Board>> buildBoard(
          _i3.BoardType? type) =>
      (super.noSuchMethod(
        Invocation.method(
          #buildBoard,
          [type],
        ),
        returnValue: _i4.Future<_i2.Either<_i3.Failure, _i3.Board>>.value(
            _FakeEither_0<_i3.Failure, _i3.Board>(
          this,
          Invocation.method(
            #buildBoard,
            [type],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i3.Failure, _i3.Board>>);
}

/// A class which mocks [RefillRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockRefillRepository extends _i1.Mock implements _i3.RefillRepository {
  MockRefillRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i3.Failure, int>> computeMinRefill(
    int? tank,
    int? distance,
    List<int>? stops,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #computeMinRefill,
          [
            tank,
            distance,
            stops,
          ],
        ),
        returnValue: _i4.Future<_i2.Either<_i3.Failure, int>>.value(
            _FakeEither_0<_i3.Failure, int>(
          this,
          Invocation.method(
            #computeMinRefill,
            [
              tank,
              distance,
              stops,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i3.Failure, int>>);
  @override
  _i4.Future<_i2.Either<_i3.Failure, List<int>>> genStops(int? distance) =>
      (super.noSuchMethod(
        Invocation.method(
          #genStops,
          [distance],
        ),
        returnValue: _i4.Future<_i2.Either<_i3.Failure, List<int>>>.value(
            _FakeEither_0<_i3.Failure, List<int>>(
          this,
          Invocation.method(
            #genStops,
            [distance],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i3.Failure, List<int>>>);
}
